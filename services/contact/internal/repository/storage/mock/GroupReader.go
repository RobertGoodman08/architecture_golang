// Code generated by mockery v2.11.0. DO NOT EDIT.

package mockStorage

import (
	context "architecture_go/pkg/type/context"
	group "architecture_go/services/contact/internal/domain/group"

	mock "github.com/stretchr/testify/mock"

	queryParameter "architecture_go/pkg/type/queryParameter"

	testing "testing"

	uuid "github.com/google/uuid"
)

// GroupReader is an autogenerated mock type for the GroupReader type
type GroupReader struct {
	mock.Mock
}

// CountGroup provides a mock function with given fields: ctx
func (_m *GroupReader) CountGroup(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroup provides a mock function with given fields: ctx, parameter
func (_m *GroupReader) ListGroup(ctx context.Context, parameter queryParameter.QueryParameter) ([]*group.Group, error) {
	ret := _m.Called(ctx, parameter)

	var r0 []*group.Group
	if rf, ok := ret.Get(0).(func(context.Context, queryParameter.QueryParameter) []*group.Group); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*group.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queryParameter.QueryParameter) error); ok {
		r1 = rf(ctx, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadGroupByID provides a mock function with given fields: ctx, ID
func (_m *GroupReader) ReadGroupByID(ctx context.Context, ID uuid.UUID) (*group.Group, error) {
	ret := _m.Called(ctx, ID)

	var r0 *group.Group
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *group.Group); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroupReader creates a new instance of GroupReader. It also registers a cleanup function to assert the mocks expectations.
func NewGroupReader(t testing.TB) *GroupReader {
	mock := &GroupReader{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
